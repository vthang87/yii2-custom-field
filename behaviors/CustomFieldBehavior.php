<?php
/**
 * Created by PhpStorm.
 * User: tamtk92
 * Date: 5/29/18
 * Time: 10:59 AM
 */

namespace vthang87\customfield\behaviors;

use vthang87\customfield\components\CustomFieldValidator;
use vthang87\customfield\models\CustomFieldGroup;
use vthang87\customfield\models\CustomFieldValue;
use Throwable;
use Yii;
use yii\base\Behavior;
use yii\db\ActiveRecord;


class CustomFieldBehavior extends Behavior
{
    
    public $customFields = null;
    
    public function events()
    {
        return [
            ActiveRecord::EVENT_BEFORE_DELETE   => 'deleteValues',
            ActiveRecord::EVENT_BEFORE_VALIDATE => 'beforeValidate',
            ActiveRecord::EVENT_AFTER_INSERT    => 'afterSave',
            ActiveRecord::EVENT_AFTER_UPDATE    => 'afterSave',
        ];
    }
    
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }
    
    public function getActiveGroups()
    {
        $model = $this->owner;
        
        return CustomFieldGroup::getAvailableCustomFieldGroups($model::className());
    }
    
    public function getAllGroups()
    {
        $model = $this->owner;
        
        $query = CustomFieldGroup::find()->alias('cfg');
        
        $query->where(['=','cfg.object_type',$model::className()]);
        
        return $query->all();
    }
    
    
    public function beforeValidate()
    {
        $model = $this->owner;
        if ($model != null && $model instanceof ActiveRecord) {
            $model[Yii::$app->getModule('customfield')->formFieldName] = Yii::$app->request->post(Yii::$app->getModule('customfield')->formFieldName);
            $validator                                                 = new CustomFieldValidator();
            $validator->validateAttribute($model,Yii::$app->getModule('customfield')->formFieldName);
        }
        
        return true;
    }
    
    public function afterSave()
    {
        $model = $this->owner;
        if ($model != null && $model instanceof ActiveRecord) {
            CustomFieldValue::saveCustomFieldValue($model[Yii::$app->getModule('customfield')->formFieldName],$model->getPrimaryKey());
        }
        
        return true;
    }
    
    
    public function deleteValues()
    {
        $model = $this->owner;
        if ($model != null && $model instanceof ActiveRecord) {
            $customFieldGroups = $this->getAllGroups();
            if ($customFieldGroups != null && count($customFieldGroups) > 0) {
                foreach ($customFieldGroups as $customFieldGroup) {
                    $customFields = $customFieldGroup->customFields;
                    if ($customFields != null && count($customFields) > 0) {
                        foreach ($customFields as $customField) {
                            try{
                                CustomFieldValue::deleteAll([
                                    'and',
                                    [
                                        '='
                                        ,
                                        'custom_field_id',
                                        $customField->custom_field_id,
                                    ],
                                    ['=','object_id',$model->getPrimaryKey()],
                                ]);
                            }catch (yii\db\Exception $e){
                                Yii::debug($e->getMessage());
                            }catch (Throwable $e){
                                Yii::debug($e->getMessage());
                            }
                        }
                    }
                }
            }
        }
        
        return true;
    }
}